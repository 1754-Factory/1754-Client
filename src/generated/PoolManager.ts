/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PoolManagerInterface extends utils.Interface {
  functions: {
    "batchRefreshPools(address[])": FunctionFragment;
    "batchSetWeight(address[],uint256[])": FunctionFragment;
    "beginInitializePeriod()": FunctionFragment;
    "commitInitializePeriod()": FunctionFragment;
    "computeAmountForPeriod(uint256)": FunctionFragment;
    "computeAmountForPool(address,uint256)": FunctionFragment;
    "computePoolShare(address,uint256)": FunctionFragment;
    "currentPeriod()": FunctionFragment;
    "initializePeriod(address[])": FunctionFragment;
    "isOwner()": FunctionFragment;
    "miningAllocator()": FunctionFragment;
    "nextPeriod()": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "poolsByIndex(uint256)": FunctionFragment;
    "poolsCount()": FunctionFragment;
    "recoverERC20(address,address,uint256)": FunctionFragment;
    "refreshPool(address)": FunctionFragment;
    "releaseSchedule()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPaused(address,bool)": FunctionFragment;
    "setWeight(address,uint256)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchRefreshPools"
      | "batchSetWeight"
      | "beginInitializePeriod"
      | "commitInitializePeriod"
      | "computeAmountForPeriod"
      | "computeAmountForPool"
      | "computePoolShare"
      | "currentPeriod"
      | "initializePeriod"
      | "isOwner"
      | "miningAllocator"
      | "nextPeriod"
      | "operator"
      | "owner"
      | "pools"
      | "poolsByIndex"
      | "poolsCount"
      | "recoverERC20"
      | "refreshPool"
      | "releaseSchedule"
      | "renounceOwnership"
      | "rewardsToken"
      | "setOperator"
      | "setPaused"
      | "setWeight"
      | "totalWeight"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchRefreshPools",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetWeight",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beginInitializePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitInitializePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAmountForPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAmountForPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computePoolShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializePeriod",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningAllocator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeight",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchRefreshPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginInitializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitInitializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAmountForPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAmountForPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePoolShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWeight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OperatorTransferred(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PeriodInitialized(uint256,uint256)": EventFragment;
    "UpdatePoolWeight(address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperatorTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePoolWeight"): EventFragment;
}

export interface OperatorTransferredEventObject {
  oldOperator: string;
  newOperator: string;
}
export type OperatorTransferredEvent = TypedEvent<
  [string, string],
  OperatorTransferredEventObject
>;

export type OperatorTransferredEventFilter =
  TypedEventFilter<OperatorTransferredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PeriodInitializedEventObject {
  index: BigNumber;
  amount: BigNumber;
}
export type PeriodInitializedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PeriodInitializedEventObject
>;

export type PeriodInitializedEventFilter =
  TypedEventFilter<PeriodInitializedEvent>;

export interface UpdatePoolWeightEventObject {
  stakingToken: string;
  index: BigNumber;
  weight: BigNumber;
  isNewPool: boolean;
}
export type UpdatePoolWeightEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  UpdatePoolWeightEventObject
>;

export type UpdatePoolWeightEventFilter =
  TypedEventFilter<UpdatePoolWeightEvent>;

export interface PoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchRefreshPools(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSetWeight(
      _stakingTokens: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beginInitializePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitInitializePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeAmountForPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeAmountForPool(
      _stakingToken: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computePoolShare(
      _stakingToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        index: BigNumber;
        amount: BigNumber;
        isInitializing: boolean;
        totalWeightAllocated: BigNumber;
      }
    >;

    initializePeriod(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    miningAllocator(overrides?: CallOverrides): Promise<[string]>;

    nextPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        index: BigNumber;
        stakingToken: string;
        poolAddress: string;
        weight: BigNumber;
        nextPeriod: BigNumber;
      }
    >;

    poolsByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverERC20(
      _pool: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refreshPool(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseSchedule(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _pool: PromiseOrValue<string>,
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWeight(
      _stakingToken: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchRefreshPools(
    _stakingTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSetWeight(
    _stakingTokens: PromiseOrValue<string>[],
    _weights: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beginInitializePeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitInitializePeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeAmountForPeriod(
    _period: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeAmountForPool(
    _stakingToken: PromiseOrValue<string>,
    _period: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computePoolShare(
    _stakingToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPeriod(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      index: BigNumber;
      amount: BigNumber;
      isInitializing: boolean;
      totalWeightAllocated: BigNumber;
    }
  >;

  initializePeriod(
    _stakingTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  miningAllocator(overrides?: CallOverrides): Promise<string>;

  nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber] & {
      index: BigNumber;
      stakingToken: string;
      poolAddress: string;
      weight: BigNumber;
      nextPeriod: BigNumber;
    }
  >;

  poolsByIndex(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  poolsCount(overrides?: CallOverrides): Promise<BigNumber>;

  recoverERC20(
    _pool: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refreshPool(
    _stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseSchedule(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  setOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _pool: PromiseOrValue<string>,
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWeight(
    _stakingToken: PromiseOrValue<string>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchRefreshPools(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSetWeight(
      _stakingTokens: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    beginInitializePeriod(overrides?: CallOverrides): Promise<void>;

    commitInitializePeriod(overrides?: CallOverrides): Promise<void>;

    computeAmountForPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAmountForPool(
      _stakingToken: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computePoolShare(
      _stakingToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        index: BigNumber;
        amount: BigNumber;
        isInitializing: boolean;
        totalWeightAllocated: BigNumber;
      }
    >;

    initializePeriod(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    miningAllocator(overrides?: CallOverrides): Promise<string>;

    nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        index: BigNumber;
        stakingToken: string;
        poolAddress: string;
        weight: BigNumber;
        nextPeriod: BigNumber;
      }
    >;

    poolsByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    poolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      _pool: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refreshPool(
      _stakingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseSchedule(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(
      _pool: PromiseOrValue<string>,
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeight(
      _stakingToken: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OperatorTransferred(address,address)"(
      oldOperator?: null,
      newOperator?: null
    ): OperatorTransferredEventFilter;
    OperatorTransferred(
      oldOperator?: null,
      newOperator?: null
    ): OperatorTransferredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PeriodInitialized(uint256,uint256)"(
      index?: null,
      amount?: null
    ): PeriodInitializedEventFilter;
    PeriodInitialized(
      index?: null,
      amount?: null
    ): PeriodInitializedEventFilter;

    "UpdatePoolWeight(address,uint256,uint256,bool)"(
      stakingToken?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      weight?: null,
      isNewPool?: PromiseOrValue<boolean> | null
    ): UpdatePoolWeightEventFilter;
    UpdatePoolWeight(
      stakingToken?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      weight?: null,
      isNewPool?: PromiseOrValue<boolean> | null
    ): UpdatePoolWeightEventFilter;
  };

  estimateGas: {
    batchRefreshPools(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSetWeight(
      _stakingTokens: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beginInitializePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitInitializePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeAmountForPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAmountForPool(
      _stakingToken: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computePoolShare(
      _stakingToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initializePeriod(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    miningAllocator(overrides?: CallOverrides): Promise<BigNumber>;

    nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsCount(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      _pool: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refreshPool(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseSchedule(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      _pool: PromiseOrValue<string>,
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWeight(
      _stakingToken: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchRefreshPools(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSetWeight(
      _stakingTokens: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beginInitializePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitInitializePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeAmountForPeriod(
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAmountForPool(
      _stakingToken: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computePoolShare(
      _stakingToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializePeriod(
      _stakingTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    miningAllocator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      _pool: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refreshPool(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseSchedule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _pool: PromiseOrValue<string>,
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWeight(
      _stakingToken: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
