/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SwappaRouterV1Interface extends utils.Interface {
  functions: {
    "getOutputAmount(address[],address[],bytes[],uint256)": FunctionFragment;
    "swapExactInputForOutput(address[],address[],bytes[],uint256,uint256,address,uint256)": FunctionFragment;
    "swapExactInputForOutputWithPrecheck(address[],address[],bytes[],uint256,uint256,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOutputAmount"
      | "swapExactInputForOutput"
      | "swapExactInputForOutputWithPrecheck"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOutputAmount",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputForOutput",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputForOutputWithPrecheck",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getOutputAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputForOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputForOutputWithPrecheck",
    data: BytesLike
  ): Result;

  events: {
    "Swap(address,address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface SwapEventObject {
  sender: string;
  to: string;
  input: string;
  output: string;
  inputAmount: BigNumber;
  outputAmount: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface SwappaRouterV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwappaRouterV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOutputAmount(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { outputAmount: BigNumber }>;

    swapExactInputForOutput(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactInputForOutputWithPrecheck(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getOutputAmount(
    path: PromiseOrValue<string>[],
    pairs: PromiseOrValue<string>[],
    extras: PromiseOrValue<BytesLike>[],
    inputAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapExactInputForOutput(
    path: PromiseOrValue<string>[],
    pairs: PromiseOrValue<string>[],
    extras: PromiseOrValue<BytesLike>[],
    inputAmount: PromiseOrValue<BigNumberish>,
    minOutputAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactInputForOutputWithPrecheck(
    path: PromiseOrValue<string>[],
    pairs: PromiseOrValue<string>[],
    extras: PromiseOrValue<BytesLike>[],
    inputAmount: PromiseOrValue<BigNumberish>,
    minOutputAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getOutputAmount(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInputForOutput(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInputForOutputWithPrecheck(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Swap(address,address,address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      to?: null,
      input?: PromiseOrValue<string> | null,
      output?: PromiseOrValue<string> | null,
      inputAmount?: null,
      outputAmount?: null
    ): SwapEventFilter;
    Swap(
      sender?: PromiseOrValue<string> | null,
      to?: null,
      input?: PromiseOrValue<string> | null,
      output?: PromiseOrValue<string> | null,
      inputAmount?: null,
      outputAmount?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    getOutputAmount(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInputForOutput(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactInputForOutputWithPrecheck(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOutputAmount(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutput(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutputWithPrecheck(
      path: PromiseOrValue<string>[],
      pairs: PromiseOrValue<string>[],
      extras: PromiseOrValue<BytesLike>[],
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
