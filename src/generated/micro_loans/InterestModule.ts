/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface InterestModuleInterface extends utils.Interface {
  functions: {
    "accrue(uint256)": FunctionFragment;
    "changeRate(uint256,uint256)": FunctionFragment;
    "chargeInterest(uint256,uint256,uint256)": FunctionFragment;
    "compounding(uint256,uint256,uint256,uint256)": FunctionFragment;
    "debt(uint256)": FunctionFragment;
    "decDebt(uint256,uint256)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "drip(uint256)": FunctionFragment;
    "file(bytes32,uint256,uint256)": FunctionFragment;
    "incDebt(uint256,uint256)": FunctionFragment;
    "loanRates(uint256)": FunctionFragment;
    "newLoan(uint256,uint256,uint256)": FunctionFragment;
    "pie(uint256)": FunctionFragment;
    "rateDebt(uint256)": FunctionFragment;
    "rates(uint256)": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "rpow(uint256,uint256,uint256)": FunctionFragment;
    "safeAdd(uint256,uint256)": FunctionFragment;
    "safeDiv(uint256,uint256)": FunctionFragment;
    "safeMul(uint256,uint256)": FunctionFragment;
    "safeSub(uint256,uint256)": FunctionFragment;
    "setRate(uint256,uint256)": FunctionFragment;
    "toAmount(uint256,uint256)": FunctionFragment;
    "toPie(uint256,uint256)": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accrue"
      | "changeRate"
      | "chargeInterest"
      | "compounding"
      | "debt"
      | "decDebt"
      | "deny"
      | "drip"
      | "file"
      | "incDebt"
      | "loanRates"
      | "newLoan"
      | "pie"
      | "rateDebt"
      | "rates"
      | "rdiv"
      | "rely"
      | "rmul"
      | "rpow"
      | "safeAdd"
      | "safeDiv"
      | "safeMul"
      | "safeSub"
      | "setRate"
      | "toAmount"
      | "toPie"
      | "wards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accrue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeInterest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "compounding",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "debt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decDebt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deny",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "drip",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "incDebt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loanRates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "newLoan",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pie",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rateDebt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rely",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rpow",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAdd",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDiv",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeMul",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSub",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toPie",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "wards",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chargeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compounding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeSub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toPie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "ChangeRate(uint256,uint256)": EventFragment;
    "DecreaseDebt(uint256,uint256)": EventFragment;
    "Deny(address)": EventFragment;
    "File(bytes32,uint256,uint256)": EventFragment;
    "IncreaseDebt(uint256,uint256)": EventFragment;
    "Rely(address)": EventFragment;
    "SetRate(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "File"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRate"): EventFragment;
}

export interface ChangeRateEventObject {
  loan: BigNumber;
  newRate: BigNumber;
}
export type ChangeRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  ChangeRateEventObject
>;

export type ChangeRateEventFilter = TypedEventFilter<ChangeRateEvent>;

export interface DecreaseDebtEventObject {
  loan: BigNumber;
  currencyAmount: BigNumber;
}
export type DecreaseDebtEvent = TypedEvent<
  [BigNumber, BigNumber],
  DecreaseDebtEventObject
>;

export type DecreaseDebtEventFilter = TypedEventFilter<DecreaseDebtEvent>;

export interface DenyEventObject {
  usr: string;
}
export type DenyEvent = TypedEvent<[string], DenyEventObject>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export interface FileEventObject {
  what: string;
  rate: BigNumber;
  value: BigNumber;
}
export type FileEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FileEventObject
>;

export type FileEventFilter = TypedEventFilter<FileEvent>;

export interface IncreaseDebtEventObject {
  loan: BigNumber;
  currencyAmount: BigNumber;
}
export type IncreaseDebtEvent = TypedEvent<
  [BigNumber, BigNumber],
  IncreaseDebtEventObject
>;

export type IncreaseDebtEventFilter = TypedEventFilter<IncreaseDebtEvent>;

export interface RelyEventObject {
  usr: string;
}
export type RelyEvent = TypedEvent<[string], RelyEventObject>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export interface SetRateEventObject {
  loan: BigNumber;
  rate: BigNumber;
}
export type SetRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetRateEventObject
>;

export type SetRateEventFilter = TypedEventFilter<SetRateEvent>;

export interface InterestModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterestModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrue(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeRate(
      loan: PromiseOrValue<BigNumberish>,
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chargeInterest(
      interestBearingAmount: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compounding(
      chi: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    debt(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drip(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    file(
      what: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loanRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newLoan(
      loan: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      fixedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pie(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rateDebt(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        pie: BigNumber;
        chi: BigNumber;
        ratePerSecond: BigNumber;
        lastUpdated: number;
        fixedRate: BigNumber;
      }
    >;

    rdiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rmul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    rpow(
      x: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeAdd(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeDiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeMul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    safeSub(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    setRate(
      loan: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toAmount(
      chi: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toPie(
      chi: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accrue(
    loan: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeRate(
    loan: PromiseOrValue<BigNumberish>,
    newRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chargeInterest(
    interestBearingAmount: PromiseOrValue<BigNumberish>,
    ratePerSecond: PromiseOrValue<BigNumberish>,
    lastUpdated: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compounding(
    chi: PromiseOrValue<BigNumberish>,
    ratePerSecond: PromiseOrValue<BigNumberish>,
    lastUpdated: PromiseOrValue<BigNumberish>,
    pie: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  debt(
    loan: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decDebt(
    loan: PromiseOrValue<BigNumberish>,
    currencyAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deny(
    usr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drip(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  file(
    what: PromiseOrValue<BytesLike>,
    rate: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incDebt(
    loan: PromiseOrValue<BigNumberish>,
    currencyAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loanRates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newLoan(
    loan: PromiseOrValue<BigNumberish>,
    ratePerSecond: PromiseOrValue<BigNumberish>,
    fixedRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pie(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rateDebt(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      pie: BigNumber;
      chi: BigNumber;
      ratePerSecond: BigNumber;
      lastUpdated: number;
      fixedRate: BigNumber;
    }
  >;

  rdiv(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rely(
    usr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rmul(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rpow(
    x: PromiseOrValue<BigNumberish>,
    n: PromiseOrValue<BigNumberish>,
    base: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeAdd(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeDiv(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeMul(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeSub(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRate(
    loan: PromiseOrValue<BigNumberish>,
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toAmount(
    chi: PromiseOrValue<BigNumberish>,
    pie: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toPie(
    chi: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accrue(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRate(
      loan: PromiseOrValue<BigNumberish>,
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    chargeInterest(
      interestBearingAmount: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    debt(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deny(usr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    drip(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    file(
      what: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    loanRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newLoan(
      loan: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      fixedRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pie(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateDebt(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        pie: BigNumber;
        chi: BigNumber;
        ratePerSecond: BigNumber;
        lastUpdated: number;
        fixedRate: BigNumber;
      }
    >;

    rdiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(usr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    rmul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRate(
      loan: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    toAmount(
      chi: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ChangeRate(uint256,uint256)"(
      loan?: PromiseOrValue<BigNumberish> | null,
      newRate?: null
    ): ChangeRateEventFilter;
    ChangeRate(
      loan?: PromiseOrValue<BigNumberish> | null,
      newRate?: null
    ): ChangeRateEventFilter;

    "DecreaseDebt(uint256,uint256)"(
      loan?: PromiseOrValue<BigNumberish> | null,
      currencyAmount?: null
    ): DecreaseDebtEventFilter;
    DecreaseDebt(
      loan?: PromiseOrValue<BigNumberish> | null,
      currencyAmount?: null
    ): DecreaseDebtEventFilter;

    "Deny(address)"(usr?: PromiseOrValue<string> | null): DenyEventFilter;
    Deny(usr?: PromiseOrValue<string> | null): DenyEventFilter;

    "File(bytes32,uint256,uint256)"(
      what?: PromiseOrValue<BytesLike> | null,
      rate?: null,
      value?: null
    ): FileEventFilter;
    File(
      what?: PromiseOrValue<BytesLike> | null,
      rate?: null,
      value?: null
    ): FileEventFilter;

    "IncreaseDebt(uint256,uint256)"(
      loan?: PromiseOrValue<BigNumberish> | null,
      currencyAmount?: null
    ): IncreaseDebtEventFilter;
    IncreaseDebt(
      loan?: PromiseOrValue<BigNumberish> | null,
      currencyAmount?: null
    ): IncreaseDebtEventFilter;

    "Rely(address)"(usr?: PromiseOrValue<string> | null): RelyEventFilter;
    Rely(usr?: PromiseOrValue<string> | null): RelyEventFilter;

    "SetRate(uint256,uint256)"(
      loan?: PromiseOrValue<BigNumberish> | null,
      rate?: null
    ): SetRateEventFilter;
    SetRate(
      loan?: PromiseOrValue<BigNumberish> | null,
      rate?: null
    ): SetRateEventFilter;
  };

  estimateGas: {
    accrue(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeRate(
      loan: PromiseOrValue<BigNumberish>,
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chargeInterest(
      interestBearingAmount: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compounding(
      chi: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debt(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drip(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    file(
      what: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loanRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newLoan(
      loan: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      fixedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pie(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateDebt(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rdiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rmul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      x: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAdd(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeDiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSub(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRate(
      loan: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toAmount(
      chi: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toPie(
      chi: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accrue(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeRate(
      loan: PromiseOrValue<BigNumberish>,
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chargeInterest(
      interestBearingAmount: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compounding(
      chi: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      lastUpdated: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debt(
      loan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drip(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    file(
      what: PromiseOrValue<BytesLike>,
      rate: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incDebt(
      loan: PromiseOrValue<BigNumberish>,
      currencyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loanRates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newLoan(
      loan: PromiseOrValue<BigNumberish>,
      ratePerSecond: PromiseOrValue<BigNumberish>,
      fixedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pie(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateDebt(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rdiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rmul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpow(
      x: PromiseOrValue<BigNumberish>,
      n: PromiseOrValue<BigNumberish>,
      base: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAdd(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDiv(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMul(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeSub(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRate(
      loan: PromiseOrValue<BigNumberish>,
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toAmount(
      chi: PromiseOrValue<BigNumberish>,
      pie: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toPie(
      chi: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
